<div id="chart"></div>
<script type="text/javascript" language='javascript'>
        
var radius = 10;
var thumbwidth = 100;
var thumbheight= 75;

var w = 1024,
    h = 768,
    i = 0,
    duration = 500,
    root;

var tree = d3.layout.tree()
    .size([h, w - thumbwidth*2]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var vis = d3.select("#chart").append("svg:svg")
    .attr("width", w)
    .attr("height", h)
  .append("svg:g")
    .attr("transform", "translate(40,0)");

d3.json('/editor/getJSONTree.json', function(json) {
  json.x0 = 300;
  json.y0 = 0;
  update(root = json);
});

function update(source) {

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse();
  // Update the nodes
  	var node = vis.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

	var nodeEnter = node.enter().append("svg:g")
    	.attr("class", "node")
    	.attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; });
    	//.style("opacity", 1e-6);


      // Enter any new nodes at the parent's previous position.
  console.log(nodeEnter);
  nodeEnter.append("svg:rect")
          .attr('y', -1*thumbheight/2)
          .attr('width', thumbwidth)
          .attr('height', thumbheight)
          .attr('fill', 'white')
          .attr('stroke', 'black')
          .attr('stroke-width', 5);
  nodeEnter.append("svg:image")
          .attr('y', -1*thumbheight/2) 
          .attr('width', thumbwidth)
          .attr('height', thumbheight)
          .attr('xlink:href', function(d) { return d.filepath })
          .style('fill', 'black')
          .on("click", click);
	nodeEnter.append("svg:text")
    		.attr("y", -1*thumbheight/2 - 5)
      	.text(function(d) { return d.name; });

  // Transition nodes to their new position.
	nodeEnter.transition()
		.duration(duration)
		.attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
    .style("opacity", 1);
      
  node.transition()
    .duration(duration)
    .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
    .style("opacity", 1);
    

	node.exit().transition()
    .duration(duration)
    .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
    .style("opacity", 1e-6)
    .remove();

  // Update the links
  var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });


  drawThumbnails(nodes);
}

function showThumbnail(d) {
        $('#thumbnail').offset({ top: d.x, left: d.y});
        console.log(d);
  console.log("top: " + d.y + " left: " + d.x);
  $('#thumbnail').html(d.body).show();
}

// Toggle children on click.
function click(d) {
   if (d.name == "Root") 
    window.location.href = "<%= url_for :action => 'index', :only_path => false %>" + "/" + 0;
   else
     window.location.href = "<%= url_for :action => 'index', :only_path => false %>" + "/" + d.id;
}

d3.select(self.frameElement).style("height", "2000px");
</script>
